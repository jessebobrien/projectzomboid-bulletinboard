name: Release

on:
  push:
    branches:
      - master
  pull_request:  # Run on PRs for testing workshop upload
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Skip tag push & release (`true` or `false`)' 
        required: false
        default: 'true'
      bump_type:
        description: 'Force version bump type: major, minor, or patch'
        required: false
        default: ''

jobs:
  bump-version-and-release:
    name: Bump version & Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

      - name: Bump version in mod.info
        id: bump
        run: |
          # Determine bump type: input override or commit message
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          if [ -z "$BUMP_TYPE" ]; then
            if git log -1 --pretty=%B | grep -iq "#major"; then
              BUMP_TYPE=major
            elif git log -1 --pretty=%B | grep -iq "#minor"; then
              BUMP_TYPE=minor
            else
              BUMP_TYPE=patch
            fi
          fi
          echo "Bump type: $BUMP_TYPE"
          VERSION=$(grep '^version=' mod.info | cut -d'=' -f2)
          IFS='.' read -r MAJ MIN PATCH <<< "$VERSION"
          case "$BUMP_TYPE" in
            major)
              MAJ=$((MAJ+1)); MIN=0; PATCH=0;;
            minor)
              MIN=$((MIN+1)); PATCH=0;;
            *)
              PATCH=$((PATCH+1));;
          esac
          NEW_VERSION="$MAJ.$MIN.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          sed -i "s/^version=.*/version=$NEW_VERSION/" mod.info
          git add mod.info

      - name: Commit and Tag
        if: >
          github.ref == 'refs/heads/master' &&
          (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'false')
        run: |
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag "v${{ steps.bump.outputs.new_version }}"

      - name: Push tags
        if: >
          github.ref == 'refs/heads/master' &&
          (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'false')
        run: git push origin master --tags

      - name: Create GitHub Release
        if: >
          github.ref == 'refs/heads/master' &&
          (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'false')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: v${{ steps.bump.outputs.new_version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --- Steam Workshop Upload ---
  # TODO: After testing, restrict workshop upload to release pushes only
      - name: Create Steam Workshop VDF
        env:
          STEAM_APP_ID: ${{ secrets.STEAM_APP_ID }}
          STEAM_WORKSHOP_ITEM_ID: ${{ secrets.STEAM_WORKSHOP_ITEM_ID }}
        run: |
          cat > workshop_build_item.vdf <<EOF
          "workshopitem"
          {
            "appid" "$STEAM_APP_ID"
            "contentfolder" "${{ github.workspace }}"
            "previewfile" "poster.png"
            "visibility" "0"
            "changenote" "Release v${{ steps.bump.outputs.new_version }}"
            "publishedfileid" "$STEAM_WORKSHOP_ITEM_ID"
          }
          EOF

      - name: Install SteamCMD
        run: |
          # Fetch and extract official SteamCMD
          mkdir -p ${GITHUB_WORKSPACE}/steamcmd
          cd ${GITHUB_WORKSPACE}/steamcmd
          wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
          tar -xzf steamcmd_linux.tar.gz

      - name: Upload to Steam Workshop
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
        run: |
          # Use extracted SteamCMD
          ${GITHUB_WORKSPACE}/steamcmd/steamcmd.sh +login $STEAM_USERNAME $STEAM_PASSWORD +workshop_build_item $(pwd)/workshop_build_item.vdf +quit

